version: '3.8'

services:
  audit-service:
    build: .
    container_name: audit-service-docker
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - NODE_ENV=development
      - PORT=9000
      - HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=audit_service_dev
      - DB_USER=audituser
      - DB_PASSWORD=audit_dev_pass_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=audit_service_jwt_dev_secret_123
      - SERVICE_SECRET=audit_service_secret_dev_key_123
      - LOG_LEVEL=debug
      - METRICS_ENABLED=true
      - AUDIT_RETENTION_DAYS=365
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3010
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - audit-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: audit-postgres-docker
    restart: unless-stopped
    environment:
      - POSTGRES_DB=audit_service_dev
      - POSTGRES_USER=audituser
      - POSTGRES_PASSWORD=audit_dev_pass_123
    ports:
      - '5434:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U audituser -d audit_service_dev']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - audit-network

  redis:
    image: redis:7-alpine
    container_name: audit-redis-docker
    restart: unless-stopped
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - audit-network

volumes:
  postgres_data:
  redis_data:

networks:
  audit-network:
    driver: bridge
